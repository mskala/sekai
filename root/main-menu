#!/usr/bin/perl

#
# MSK 001 Sekai Universal Host - simple top-level menu
# Copyright (C) 2014  Matthew Skala
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Matthew Skala
# http://ansuz.sooke.bc.ca/
# mskala@ansuz.sooke.bc.ca
#

require "lk204.pl";

&lk204_open;

while (1) {
  &update_mount_status;
  &lk204_clear_screen;
  &lk204_text("Main menu");

  $_=&lk204_grid_submenu(2,'sys','USB','files','MIDI','audio');
  if ($_ eq 'sys') {
    &sys_menu;
  } elsif ($_ eq 'USB') {
    &usb_menu;
  } elsif ($_ eq 'files') {
    &not_implemented;
  } elsif ($_ eq 'MIDI') {
    &midi_menu;
  } elsif ($_ eq 'audio') {
    &audio_menu;
  }
}

sub not_implemented {
  &lk204_set_cursor_pos(3,1);
  &lk204_text('not implemented');
  &lk204_horiz_menu(4,':-(');
}

sub sys_menu {
  while (1) {
    &update_mount_status;
    &lk204_clear_screen;
    &lk204_text("System menu");

    $_=&lk204_horiz_submenu(2,'IP',$root_writable?'ro/':'rw/','reload');
    if ($_ eq 'IP') {
      &set_ip_address;
    } elsif ($_ eq 'ro/') {
      &make_root_read_only;
    } elsif ($_ eq 'rw/') {
      &make_root_writable;
    } elsif ($_ eq 'reload') {
      &lk204_close;
      if ($lk204_is_ansi) {
        exit;
      } else {
        exec './main-menu';
      }
    } elsif ($_ eq '[ESC]') {
      return;
    }
  }
}

sub usb_menu {
  while (1) {
    &update_mount_status;
    &lk204_clear_screen;
    &lk204_text("USB menu");

    $_=&lk204_horiz_submenu(2,'mnt','unmnt1','unmnt*');
    if ($_ eq 'mnt') {
      &not_implemented;
    } elsif ($_ eq 'unmnt1') {
      &not_implemented;
    } elsif ($_ eq 'unmnt*') {
      &not_implemented;
    } elsif ($_ eq '[ESC]') {
      return;
    }
  }
}

sub midi_menu {
  while (1) {
    &update_mount_status;
    &lk204_clear_screen;
    &lk204_text("MIDI menu");

    $_=&lk204_grid_submenu(2,'conn','disco','progch','tune','xlat');
    if ($_ eq 'conn') {
      &midi_conn;
    } elsif ($_ eq 'disco') {
      &midi_disco;
    } elsif ($_ eq 'progch') {
      &midi_progch;
    } elsif ($_ eq 'tune') {
      &midi_tune;
    } elsif ($_ eq 'xlat') {
      system './midi/threev';
    } elsif ($_ eq '[ESC]') {
      return;
    }
  }
}

sub audio_menu {
  &not_implemented;
}

########################################################################

sub update_mount_status {
  # check for saved root status
  # this is needed because the ODROID's kernel lies in /proc/mounts,
  # often reporting root as rw when it isn't, and we need to know 4 reals
  open(RS,'/etc/msk001-root-status');
  $root_status=<RS>;
  chomp $root_status;
  close(RS);

  # also check what the kernel claims, as a fallback
  undef $/;
  open(MOUNTS,'/proc/mounts');
  $mounts=<MOUNTS>;
  close(MOUNTS);
  $/="\n";

  # decide what we will believe
  if ($root_status eq '') {
    if ($mounts=~m! / .*\brw\b!) {
      $root_writable=1;
    } else {
      $root_writable=0;
    }
  } else {
    $root_writable=($root_status eq 'read-write')?1:0;
  }

  # report it on the top LED
  if ($root_writable) {
    &lk204_led_red(1);
  } else {
    &lk204_led_green(1);
  }

  # also skim the /proc/mounts and /proc/mdstat to figure out what SCSI
  # or SCSIesque devices we will believe are hard disks
  %hard_disks=();  
  while ($mounts=~m!^(/dev/sd[a-z])\d* (/\S+)!mg) {
    next if substr($2,0,4) eq '/mnt';
    $hard_disks{$1}=1;
  }
  open(MDSTAT,'/proc/mdstat');
  while (<MDSTAT>) {
    next unless /^md\d+ : /;
    while (/\b(sd?\d*)\[/g) {
      $hard_disks{"/dev/$1"}=1;
    }
  }
  close(MDSTAT);

  %usb_exists=();
  %usb_mounted=();
  while ($mounts=~m!^(/dev/sd[a-z])(\d*) (/\S+)!mg) {
    next if $hard_disks{$1};
    $usb_exists{$1.$2}=1;
    $usb_mounted{$1.$2}=1;
  }
  $_=`/sbin/blkid`;
  while (m!^(/dev/sd[a-z])(\d*):!mg) {
    next if $hard_disks{$1};
    $usb_exists{$1.$2}=1;
  }

  # report USB status on middle LED
  if (!(%usb_exists)) {
    &lk204_led_green(2);
  } elsif (%usb_mounted) {
    &lk204_led_red(2);
  } else {
    &lk204_led_yellow(2);
  }  
}

########################################################################

sub make_root_read_only {
  if ($mounts!~m!tmpfs /etc tmpfs!m) {
    `/sbin/mount -n -t tmpfs tmpfs /mnt/rwfs/etc -o mode=0755`;
    `/usr/bin/cp -a /etc/* /mnt/rwfs/etc`;
    `/sbin/mount --move /mnt/rwfs/etc /etc`;
    `echo 'read-only' > /etc/msk001-root-status`;
  }
  `sync ; /bin/mount -n -o remount,ro /`;
}

sub make_root_writable {
  `/bin/mount -n -o remount,rw /`;
  if ($mounts=~m!tmpfs /etc tmpfs!m) {
    `/sbin/umount /etc`;
  }
}

########################################################################

sub set_ip_address {
  $psout=`ps -ax 2> /dev/null`;
  $ifcout=`/sbin/ifconfig eth0`;
  
  if ($psout=~m!/sbin/dhcpcd!) {
    $dhcpcd_running=1;
  } else {
    $dhcpcd_running=0;
  }
  if ($ifcout=~/\binet (\d+\.\d+\.\d+\.\d+) /) {
    $ip=$1;
  } else {
    $ip='';
  }

  &lk204_clear_screen;
  if ($dhcpcd_running) {
    &lk204_text('dhcpcd is running');
  } else {
    &lk204_text('dhcpcd NOT running');
  }

  &lk204_set_cursor_pos(2,1);
  if ($ip ne '') {
    &lk204_text("IP: $ip");
  } else {
    &lk204_text('no IP active');
  }

  &lk204_set_cursor_pos(3,1);
  &lk204_text('Choose config type');

  $_=&lk204_horiz_submenu(4,'DHCP','static','cancel');
  if ($_ eq 'DHCP') {
    `killall dhcpcd` if $dhcpcd_running;
    `/sbin/dhcpcd &`;

  } elsif ($_ eq 'static') {
    `killall dhcpcd` if $dhcpcd_running;
    $new_ip=&lk204_edit_ip_address(4,$ip);
    `/sbin/ifconfig eth0 $new_ip`;
  }
}

########################################################################

sub midi_conn {
  @inputs=();
  open(ACONN,'aconnect -i -l|');
  while (<ACONN>) {
    $clientno=$1 if (/^client (\d+):/);
    if (($clientno>0) && (/^    0 '(.*)'/)) {
      $_="$clientno:$1";
      s/ +$//;
      push @inputs,substr($_,0,20);
    }
  }
  close(ACONN);
  
  $_=&lk204_vert_menu('Choose MIDI input',@inputs);
  if (/^(\d+):/) {
    $inport=$1;
  } else {
    return;
  }

  @outputs=();
  open(ACONN,'aconnect -o -l|');
  while (<ACONN>) {
    $clientno=$1 if (/^client (\d+):/);
    if (($clientno>0) && (/^    0 '(.*)'/)) {
      $_="$clientno:$1";
      s/ +$//;
      push @outputs,substr($_,0,20);
    }
  }
  close(ACONN);

  $_=&lk204_vert_menu('Choose MIDI output',@outputs);
  if (/^(\d+):/) {
    $outport=$1;
  } else {
    return;
  }
  
  `aconnect $inport $outport`;
}

sub midi_disco {
  &lk204_set_cursor_pos(3,1);
  &lk204_text('disconnect all MIDI?');
  if (&lk204_horiz_submenu(4,'YES','NO') eq 'YES') {
    `aconnect -x`;
  }
}

########################################################################

sub midi_progch {
  @program_names=split(/\n/,<<EOF);
1 Acoustic Grand
2 Bright Acoustic
3 Electric Grand
4 Honky-Tonk Piano
5 Electric Piano 1
6 Electric Piano 2
7 Harpsichord
8 Clavinet
9 Celesta
10 Glockenspiel
11 Music Box
12 Vibraphone
13 Marimba
14 Xylophone
15 Tubular Bells
16 Dulcimer
17 Drawbar Organ
18 Percussive Organ
19 Rock Organ
20 Church Organ
21 Reed Organ
22 Accordian
23 Harmonica
24 Tango Accordian
25 Nylon String Gtr
26 Steel String Gtr
27 Electric Jazz Gtr
28 Electr. Clean Gtr
29 Electr. Muted Gtr
30 Overdriven Guitar
31 Distortion Guitar
32 Guitar Harmonics
33 Acoustic Bass
34 Elec. Bass finger
35 Elec. Bass pick
36 Fretless Bass
37 Slap Bass 1
38 Slap Bass 2
39 Synth Bass 1
40 Synth Bass 2
41 Violin
42 Viola
43 Cello
44 Contrabass
45 Tremolo Strings
46 Pizzicato Strings
47 Orchest. Strings
48 Timpani
49 String Ensemble 1
50 String Ensemble 2
51 Synth Strings 1
52 Synth Strings 2
53 Choir Aahs
54 Voice Oohs
55 Synth Voice
56 Orchestra Hit
57 Trumpet
58 Trombone
59 Tuba
60 Muted Trumpet
61 French Horn
62 Brass Section
63 Synth Brass 1
64 Synth Brass 2
65 Soprano Sax
66 Alto Sax
67 Tenor Sax
68 Baritone Sax
69 Oboe
70 English Horn
71 Bassoon
72 Clarinet
73 Piccolo
74 Flute
75 Recorder
76 Pan Flute
77 Blown Bottle
78 Shakuhachi
79 Whistle
80 Ocarina
81 Lead 1 square
82 Lead 2 sawtooth
83 Lead 3 calliope
84 Lead 4 chiff
85 Lead 5 charang
86 Lead 6 voice
87 Lead 7 fifths
88 Lead 8 bass+lead
89 Pad 1 new age
90 Pad 2 warm
91 Pad 3 polysynth
92 Pad 4 choir
93 Pad 5 bowed
94 Pad 6 metallic
95 Pad 7 halo
96 Pad 8 sweep
97 FX1 rain
98 FX2 soundtrack
99 FX3 crystal
100 FX4 atmosphere
101 FX5 brightness
102 FX6 goblins
103 FX7 echoes
104 FX8 sci-fi
105 Sitar
106 Banjo
107 Shamisen
108 Koto
109 Kalimba
110 Bagpipe
111 Fiddle
112 Shanai
113 Tinkle Bell
114 Agogo
115 Steel Drums
116 Woodblock
117 Taiko Drum
118 Melodic Tom
119 Synth Drum
120 Reverse Cymbal
121 Gtr Fret Noise
122 Breath Noise
123 Seashore
124 Bird Tweet
125 Telephone Ring
126 Helicopter
127 Applause
128 Gunshot
EOF
  @program_sets=split(/\n/,<<EOF);
PIANO
CHROM PERCUS
ORGAN
GUITAR
BASS
STRINGS
ENSEMBLE
BRASS
REED
PIPE
SYNTH LEAD
SYNTH PAD
SYNTH FX
ETHNIC
PERCUSSIVE
SOUND FX
EOF

  $last_refreshed_connections=0;
  my($channel)=1;
  my($program)=0;
  my($outno)=-1;
  my($y,$i)=(0,0);
  my($x10)=0;

  &lk204_clear_screen;
  &lk204_text('MIDI program');
  
  &lk204_set_cursor_pos(3,1);
  &lk204_text('Chn 1          PIANO');
  &lk204_set_cursor_pos(4,1);
  &lk204_text($program_names[0]);



  while (1) {
    if ($last_refreshed_connections<(time-10)) {
      $outno=$output_numbers[$outno] if $outno>=0;

      @outputs=();
      @output_numbers=();
      open(ACONN,'aconnect -o -l|');
      while (<ACONN>) {
        $clientno=$1 if (/^client (\d+):/);
        if (($clientno>0) && (/^    0 '(.*)'/)) {
          $_="$clientno:$1";
          s/ +$//;
          push @outputs,substr($_,0,20);
          push @output_numbers,$clientno;
        }
      }
      close(ACONN);
      
      if ($outno<0) {
        $outno=0;
      } else {
        for ($i=0;$i<=$#output_numbers;$i++) {
          if ($outno==$output_numbers[$i]) {
            $outno=$i;
            last;
          }
        }
      }

      &lk204_set_cursor_pos(2,1);
      &lk204_text(substr($outputs[$outno].(' 'x20),0,20));
      $last_refreshed_connections=time+0;
    }

    &lk204_set_cursor_pos(2+$y,1);
    $_=&lk204_get_key;

    if ($_ eq 'C') { # right
      if ($y==0) {
        $outno++;
        $outno=0 if $outno>$#outputs;
        &lk204_set_cursor_pos(2,1);
        &lk204_text(substr($outputs[$outno].(' 'x20),0,20));

      } elsif ($y==1) {
        $channel++;
        $channel=1 if $channel>16;
        &lk204_set_cursor_pos(3,1);
        &lk204_text("Chn $channel ");

      } else {
        $program+=($x10?10:1);
        $program=0 if $program>127;
        &lk204_set_cursor_pos(3,7);
        &lk204_text(substr((' 'x14).$program_sets[int($program/8)],-14));
        &lk204_set_cursor_pos(4,1);
        &lk204_text(substr($program_names[$program].(' 'x20),0,20));
      }
    }

    if ($_ eq 'D') { # left
      if ($y==0) {
        $outno--;
        $outno=$#outputs if $outno<0;
        &lk204_set_cursor_pos(2,1);
        &lk204_text(substr($outputs[$outno].(' 'x20),0,20));

      } elsif ($y==1) {
        $channel--;
        $channel=16 if $channel<1;
        &lk204_set_cursor_pos(3,1);
        &lk204_text("Chn $channel ");
      
      } else {
        $program-=($x10?10:1);
        $program=127 if $program<0;
        &lk204_set_cursor_pos(3,7);
        &lk204_text(substr((' 'x14).$program_sets[int($program/8)],-14));
        &lk204_set_cursor_pos(4,1);
        &lk204_text(substr($program_names[$program].(' 'x20),0,20));
      }
    }
    
    if ($_ eq 'A') { # up-left: exit
      return;
    }

    if ($_ eq 'G') { # down-left: toggle x10
      if ($x10) {
        $x10=0;
        &lk204_set_cursor_pos(1,15);
        &lk204_text(' 'x5);
      } else {
        $x10=1;
        &lk204_set_cursor_pos(1,15);
        &lk204_text('{x10}');
      }
    }
    
    if ($_ eq 'B') { # up
      $y--;
      $y=2 if $y<0;
    }

    if ($_ eq 'H') { # down
      $y++;
      $y=0 if $y>2;
    }
    
    if ($_ eq 'E') { # centre: send command
      $message=pack('A4NnnnA4NCCCCCCC',
        'MThd',6,1,1,0x1E0,
        'MTrk',7,
          0,0xBF+$channel,$program,
          0,0xFF,0x2F,0);
      open(APLAY,'|aplaymidi -p '.$output_numbers[$outno].':0 -');
      print APLAY $message;
      close(APLAY);
    }
  }
}

########################################################################

sub midi_tune {
  @note_cycle=qw/C C# D D# E F F# G G# A A# B/;

  &lk204_clear_screen;
  &lk204_text('MIDI tuner');
  &lk204_set_cursor_pos(2,1);
  &lk204_text('UD channel, LR pitch');
  
  &lk204_set_cursor_pos(3,1);
  &lk204_text('1  69 A4    440.00Hz');
  &lk204_set_cursor_pos(4,1);
  &lk204_text('2  69 A4    440.00Hz');
  
  $channel=1;
  $note[1]=69;
  $note[2]=69;
  `amidi -p hw:1,0,0 -S '91 45 64'`;
  `amidi -p hw:2,0,0 -S '91 45 64'`;
  `amidi -p hw:1,0,0 -S '81 45 00'`;
  `amidi -p hw:2,0,0 -S '81 45 00'`;

  while (1) {
    &lk204_set_cursor_pos(2+$channel,1);
    $_=&lk204_get_key;

    if ($_ eq 'C') { # right
      $note[$channel]++;
      $note[$channel]=127 if $note[$channel]>127;
    }

    if ($_ eq 'D') { # left
      $note[$channel]--;
      $note[$channel]=0 if $note[$channel]<0;
    }
    
    if ($_ eq 'A') { # up-left
      $note[$channel]+=12;
      $note[$channel]=127 if $note[$channel]>127;
    }

    if ($_ eq 'G') { # down-left
      $note[$channel]-=12;
      $note[$channel]=0 if $note[$channel]<0;
    }
    
    if (/[ACDG]/) {
      &lk204_text(sprintf('%d %3d %-4s%8.2fHz',
        $channel,$note[$channel],
        $note_cycle[$note[$channel]%12].(int($note[$channel]/12)-1),
        440*2**(($note[$channel]-69)/12)));
      $notenum=sprintf('%02X',$note[$channel]);
      if ($channel==1) {
        `amidi -p hw:1,0,0 -S '91 $notenum 64'`;
        `amidi -p hw:1,0,0 -S '81 $notenum 00'`;
      } else {
        `amidi -p hw:2,0,0 -S '91 $notenum 64'`;
        `amidi -p hw:2,0,0 -S '81 $notenum 00'`;
      }
    }
    
    if (($_ eq 'B') or ($_ eq 'H')) { # other channel
      $channel=3-$channel;
    }
    
    if ($_ eq 'E') { # exit
      return;
    }
  }
}
